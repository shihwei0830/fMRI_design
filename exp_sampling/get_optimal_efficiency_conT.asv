function results = get_optimal_efficiency_conT(n_trials,nT_run,t_range,tr,mu,n_sim,leave_best,fname,UB_yes)
%
% Total time (nT_run) as a constraint. It constrains the sum of ISI and ITI
% do not exceed some value, making sure that total run time is not
% exceeding nT_run.
% results = get_optimal_efficiency_conT(40,600,[2 8;2 20],2,[4 6],20000,5,'exp3_2')
%
% Run simulations to find optimal efficiency
% Before you run this, 
% (1) Decide how long your run is in sec. e.g., 600 (sec)
% (2) Run get_nTrials_est.m to have an idea about n_trials (number
% of trials) and the mean of jitter (mu) 
% (3) Once you determine n_trials, jitter mean (mu), set jittering parameters below
%
% Jitter parameters:
% e.g.
% t_range = [2 12];
% tr = 2;
% theta = 4;
%
% n_sim: number of simulations
% e.g., n_sim = 10000;
%
% leave_best: number of best efficiency to keep
% e.g., leave_best = 5;
%
% (4) fname: name of file you want to save your results. e.g., fname =
% 'exp0'
%
% Now you are ready to run this function.
%
%

% Define time points of a run
% length of a run in sec
orig_resl = 0.1; % original resolution in time (sec)

% Trial timing parameters
t_longFixTotal = 20; % long fixation at beginning and end
t_stim = 2;
t_feedback = 2;

t_jitter_total = nT_run - t_longFixTotal - (t_stim + t_feedback)*n_trials;
big_sample = 10000;
if length(mu)>1
    for i=1:length(mu)
        [sample,histo,new_mu(i)] = get_expo_sample(t_range(i,:),tr,mu(i),big_sample);
        sd_sample(i) = std(sampled);
    end
    t_isi_total = ceil(t_jitter_total*(new_mu(1)/sum(new_mu))) + ;
    t_iti_total = ceil(t_jitter_total*(new_mu(2)/sum(new_mu)));
else
    [sample,histo,new_mu] = get_expo_sample(t_range,tr,mu,big_sample);
    sd_sample = std(sample);
    t_isi_total = ceil (t_jitter_total/2 + sd_sample);
    t_iti_total = t_isi_total;
end


% Simulate jittered ISI and ITI.
count_n_sim_isi = 0;
while 1
     t_isi_0 = get_expo_sample(t_range(1,:),2,mu(1),n_trials);
     if sum(t_isi_0)<=t_isi_total
         count_n_sim_isi = count_n_sim_isi+1
         t_isi(:,count_n_sim_isi) = t_isi_0;
         if count_n_sim_isi == n_sim
             break
         end
     end
end

count_n_sim_iti = 0;
while 1
     t_iti_0 = get_expo_sample(t_range(1,:),tr,mu(2),n_trials);
     if sum(t_iti_0)<=t_iti_total
         count_n_sim_iti = count_n_sim_iti+1
         t_iti(:,count_n_sim_iti) = t_iti_0;
         if count_n_sim_iti == n_sim
             break
         end
     end
end


% Compute efficiency and select maximum efficiency
% regressor timeseries
% in every trial, stimulus is followed by feedback
tau = 2; delta=2;
params_hrf = [tau delta];
best_eff = zeros(1,leave_best);
eff = zeros(1,n_sim);
for i=1:n_sim
    % Create 3-column matrix for each regressor
    t_end = 0;
    for j=1:n_trials
        t_start = t_end;
        stim_onset = t_start;
        feedback_onset = stim_onset + t_stim + t_isi(j,i);
        t_stim_3Col(j,:) = [stim_onset t_stim 1];
        t_feedback_3Col(j,:) = [feedback_onset t_feedback 1];
        t_end = feedback_onset + t_feedback + t_iti(j,i);
    end
    
    % Generate neural timeseries
    nT_simRun = ceil(sum(t_isi(:,i))) + ceil(sum(t_iti(:,i))) + (t_stim + t_feedback)*n_trials;
    t_grid = 0:orig_resl:nT_simRun;
    neural_ts_stim = generate_neural_ts(t_stim_3Col,t_grid);
    neural_ts_feedback = generate_neural_ts(t_feedback_3Col,t_grid);
    neural_ts_stim = neural_ts_stim(1:length(t_grid));
    neural_ts_feedback = neural_ts_feedback(1:length(t_grid));
    
    % Generate BOLD timeseries
    [BOLD_ts_stim,t_grid_downSamp] = generate_BOLD_ts(neural_ts_stim,params_hrf,orig_resl,tr,t_grid);
    [BOLD_ts_feedback,t_grid_downSamp] = generate_BOLD_ts(neural_ts_feedback,params_hrf,orig_resl,tr,t_grid);
    
    % Compute design efficiency
    x = [BOLD_ts_stim BOLD_ts_feedback]; %design matrix
    c = [1 -1]; % contrast matrix
    w_vect = 1; % weight vector
    eff(i) = get_efficiency(x,c,w_vect);
    if i <= leave_best
        best_eff(i) = eff(i);
        best_t_stim_3Col(i,:,:) = t_stim_3Col;
        best_t_feedback_3Col(i,:,:) = t_feedback_3Col;
        best_t_isi(:,i) = t_isi(:,i);
        best_t_iti(:,i) = t_iti(:,i);
        if i == leave_best
            [best_eff,id_best_eff_orig] = sort(best_eff,'descend');
            % update best_eff according to sorted best_eff
            % orig: id in original simulation order, e.g., [2 1 3 4 5] indicates that 
            % the biggest eff is from the second simulation, the second
            % biggest from the first simulation, etc.
        end
    else
        
        % Create test bed
        best_eff_test = [best_eff eff(i)];  % a new eff vector containing the best eff so far and the new eff; 
        id_best_eff_orig_test = [id_best_eff_orig i];
        % e.g., say i=26, then id_best_eff_test = [2 1 3 4 5 26]
        
        % Sort the new eff vector to get the index from best to worst
        [best_eff_test_sorted,id_best_eff_test_sorted] = sort(best_eff_test,'descend');
        % id_best_eff_test_sorted will be numbers from 1 to 6, e.g., [3 4 1
        % 2 6 5] indicates that the 3rd element in best_eff_test has the
        % biggest eff, then the 4th element, and etc.
        
        % Update best eff
        best_eff = best_eff_test_sorted(1:leave_best);      % get the best eff from the sorted new eff vector
        
        % Update id_best_eff (always 5 of the numbers from 1 to 6)
        id_best_eff = id_best_eff_test_sorted(1:leave_best);
        
        % Update id_best_eff_orig
        id_best_eff_orig = id_best_eff_orig_test(id_best_eff_test_sorted(1:leave_best));    % get the id of the new best eff
        % e.g., id_best_eff = [1 26 6 4 16];
        
        
        % say xxx
        % if one of the best eff is the new eff, 
        if any(id_best_eff == (leave_best+1))
            id_kept = find(id_best_eff ~= (leave_best+1));   % id_kept = [1 3 4 5]
            id_new = find(id_best_eff == (leave_best+1));    % e.g., the new eff is ranked 2nd, i.e., id_new = 2
            
            % Redefine best_stim_3Col
            best_t_stim_3Col_new(id_kept,:,:) = best_t_stim_3Col(id_best_eff(id_kept),:,:); 
            % id_kept = [1 3 4 5];
            % id_best_eff(id_kept) = [1 6 4 16]
            best_t_stim_3Col_new(id_new,:,:) = t_stim_3Col;
            best_t_stim_3Col = best_t_stim_3Col_new; 
            
            % Redefine best_feedback_3Col
            best_t_feedback_3Col_new(id_kept,:,:) = best_t_feedback_3Col(id_best_eff(id_kept),:,:);
            best_t_feedback_3Col_new(id_new,:,:) = t_feedback_3Col;
            best_t_feedback_3Col = best_t_feedback_3Col_new;

            % Redefine best isi
            best_t_isi_new(:,id_kept) = best_t_isi(:,id_best_eff(id_kept));
            best_t_isi_new(:,id_new) = t_isi(:,i);
            best_t_isi = best_t_isi_new;
            
            % Redefine best iti
            best_t_iti_new(:,id_kept) = best_t_iti(:,id_best_eff(id_kept));
            best_t_iti_new(:,id_new) = t_iti(:,i);
            best_t_iti = best_t_iti_new;
        end

    end
    
end

sum_iti = ceil(sum(best_t_iti));
sum_isi = ceil(sum(best_t_isi));
sum_run_totalT = t_longFixTotal + (t_stim + t_feedback)*n_trials + sum_iti + sum_isi;
results.eff = eff;
results.best_eff = best_eff;
results.best_t_stim_3Col = best_t_stim_3Col;
results.best_t_feedback_3Col = best_t_feedback_3Col;
results.best_t_isi = best_t_isi;
results.best_t_iti = best_t_iti;
results.id_best_eff_orig = id_best_eff_orig;
results.sum_run_totalT = sum_run_totalT;
results.t_range = t_range;
results.mu = mu;
results.tr = tr;
results.n_trials = n_trials;
results.t_stim = t_stim;
results.t_feedback = t_feedback;
results.t_longFixTotal = t_longFixTotal;

save(fname,'results');

%fprintf('\n run length from the best efficiency is %d\n',sum_run_totalT)

figure;
subplot(3,1,1)
histogram(eff);
title('efficiency');

subplot(3,1,2);
histogram(best_t_isi);
title('best ISI');

subplot(3,1,3);
histogram(best_t_iti);
title('best ITI');

% figure;
% plot(t_grid_downSamp,BOLD_ts_stim,'k','linewidth',2);
% hold on;
% plot(t_grid_downSamp,BOLD_ts_feedback,'r','linewidth',2);
% 






